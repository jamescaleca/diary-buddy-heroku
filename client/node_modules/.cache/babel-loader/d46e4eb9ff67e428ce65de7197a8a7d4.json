{"ast":null,"code":"var _jsxFileName = \"/Users/jamescaleca/Desktop/diary-buddy/client/diary-buddy/src/contexts/templateContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport affirmations from \"../components/affirmationData.js\";\nimport journalPrompts from \"../components/promptsData.js\"; // import { useEntries } from \"../contexts/userEntryContext\"\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TemplateContext = /*#__PURE__*/createContext();\n\nfunction TemplateContextProvider(props) {\n  _s();\n\n  const history = useHistory();\n  const dateForToday = new Date();\n  const dayOfMonth = dateForToday.getDate();\n\n  function goBack() {\n    history.goBack();\n  }\n\n  function dailyAffirmation() {\n    // new Date() is a date constructor that gives you the month, day, year, hours, seconds, and milliseconds\n    // The getDate() method returns the day of the month for the specified date according to local time.\n    return affirmations.map(message => message.date === dayOfMonth ? message.affirmation : null);\n  }\n\n  function dailyPrompt() {\n    return journalPrompts.map(journal => journal.date === dayOfMonth ? journal.prompts : null);\n  }\n\n  return /*#__PURE__*/_jsxDEV(TemplateContext.Provider, {\n    value: {\n      // handleSubmit,\n      // handleChange,\n      // promptInputs,\n      goBack,\n      dailyAffirmation,\n      dailyPrompt\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n}\n\n_s(TemplateContextProvider, \"9cZfZ04734qoCGIctmKX7+sX6eU=\", false, function () {\n  return [useHistory];\n});\n\n_c = TemplateContextProvider;\nexport { TemplateContextProvider, TemplateContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"TemplateContextProvider\");","map":{"version":3,"sources":["/Users/jamescaleca/Desktop/diary-buddy/client/diary-buddy/src/contexts/templateContext.js"],"names":["React","createContext","useState","useHistory","affirmations","journalPrompts","TemplateContext","TemplateContextProvider","props","history","dateForToday","Date","dayOfMonth","getDate","goBack","dailyAffirmation","map","message","date","affirmation","dailyPrompt","journal","prompts","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,aAAf,EAA8BC,QAA9B,QAA6C,OAA7C;AACA,SAAQC,UAAR,QAAyB,kBAAzB;AACA,OAAOC,YAAP,MAAyB,kCAAzB;AACA,OAAOC,cAAP,MAA2B,8BAA3B,C,CACA;;;AAEA,MAAMC,eAAe,gBAAGL,aAAa,EAArC;;AAEA,SAASM,uBAAT,CAAiCC,KAAjC,EAAwC;AAAA;;AACpC,QAAMC,OAAO,GAAGN,UAAU,EAA1B;AACA,QAAMO,YAAY,GAAG,IAAIC,IAAJ,EAArB;AACA,QAAMC,UAAU,GAAGF,YAAY,CAACG,OAAb,EAAnB;;AAEA,WAASC,MAAT,GAAkB;AACdL,IAAAA,OAAO,CAACK,MAAR;AACH;;AAED,WAASC,gBAAT,GAA4B;AACxB;AACA;AACA,WAAOX,YAAY,CAACY,GAAb,CAAiBC,OAAO,IAC3BA,OAAO,CAACC,IAAR,KAAiBN,UAAjB,GAA8BK,OAAO,CAACE,WAAtC,GAAoD,IADjD,CAAP;AAGH;;AAED,WAASC,WAAT,GAAuB;AACnB,WAAOf,cAAc,CAACW,GAAf,CAAmBK,OAAO,IAC7BA,OAAO,CAACH,IAAR,KAAiBN,UAAjB,GAA8BS,OAAO,CAACC,OAAtC,GAAgD,IAD7C,CAAP;AAGH;;AAED,sBAEI,QAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAE;AAC7B;AACA;AACA;AACAR,MAAAA,MAJ6B;AAK7BC,MAAAA,gBAL6B;AAM7BK,MAAAA;AAN6B,KAAjC;AAAA,cAQIZ,KAAK,CAACe;AARV;AAAA;AAAA;AAAA;AAAA,UAFJ;AAcH;;GArCQhB,uB;UACWJ,U;;;KADXI,uB;AAuCT,SAAQA,uBAAR,EAAiCD,eAAjC","sourcesContent":["import React, {createContext, useState} from \"react\"\nimport {useHistory} from \"react-router-dom\"\nimport affirmations from \"../components/affirmationData.js\"\nimport journalPrompts from \"../components/promptsData.js\"\n// import { useEntries } from \"../contexts/userEntryContext\"\n\nconst TemplateContext = createContext()\n\nfunction TemplateContextProvider(props) {\n    const history = useHistory()\n    const dateForToday = new Date();\n    const dayOfMonth = dateForToday.getDate();\n\n    function goBack() {\n        history.goBack()\n    }\n\n    function dailyAffirmation() {\n        // new Date() is a date constructor that gives you the month, day, year, hours, seconds, and milliseconds\n        // The getDate() method returns the day of the month for the specified date according to local time.\n        return affirmations.map(message => \n            message.date === dayOfMonth ? message.affirmation : null \n        )\n    }\n\n    function dailyPrompt() {\n        return journalPrompts.map(journal => \n            journal.date === dayOfMonth ? journal.prompts : null \n        )\n    }\n    \n    return (\n\n        <TemplateContext.Provider value={{\n            // handleSubmit,\n            // handleChange,\n            // promptInputs,\n            goBack,\n            dailyAffirmation,\n            dailyPrompt,\n        \n        }}>{props.children}\n        </TemplateContext.Provider>\n        \n    )\n}\n\nexport {TemplateContextProvider, TemplateContext}"]},"metadata":{},"sourceType":"module"}